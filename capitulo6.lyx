#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass book
\use_default_options true
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement h
\paperfontsize 12
\spacing onehalf
\use_hyperref false
\papersize letterpaper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "basicstyle={\ttfamily\small}"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Evaluación de reglas de negocio
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Uno de los aspectos más complejos de la aplicación PCA Audit es la necesidad
 de hacerlo adaptable a la gran variedad de requerimientos específicos de
 sus clientes\SpecialChar \@.
 La aplicación realiza análisis sobre los reclamos de salud
 que introducen los analistas y pacientes afiliados a pólizas de seguros
 de clientes de la empresa, y parte de ese análisis es de naturaleza puramente
 farmacológica y médica, y se realiza por la aplicación precisamente para
 que la empresa aseguradora pueda validar las operaciones de sus asegurados
 sin tener que definir en detalle las reglas que determinan qué operaciones
 son legítimas\SpecialChar \@.
 Sin embargo, las pólizas de seguros están asociadas a una
 gran cantidad de reglas de cobertura que sí deben ser definidas por el
 asegurador: cada tipo de póliza de seguros médicos define detalladamente
 cuándo se cubre el costo de adquisición de cuáles medicamentos específicos,
 y en relación a cuáles enfermedades, entre muchas otras condiciones a considera
r\SpecialChar \@.
 En efecto, es un principio de diseño esencial para los productos de la
 empresa que sea posible parametrizar y adaptar el comportamiento de sus
 aplicaciones a las necesidades, reglas de negocio y modalidades de operación
 específicas de cada cliente\SpecialChar \@.
 En efecto, es posible expresar cualquier comportami
ento deseado en la implantación de PCA Audit\SpecialChar \@.
 Sin embargo, la complejidad
 de la aplicación es considerable incluso sin tomar en cuenta la adaptación
 a reglas específicas para cada póliza de cada cliente, y si se implantaran
 módulos de la aplicación con código específico para todas las condiciones
 de cobertura que es necesario considerar, la complejidad de la aplicación
 aumentaría muy rápidamente y se enfrentarían aún más problemas de mantenibilida
d\SpecialChar \@.

\end_layout

\begin_layout Section
Antecedentes
\end_layout

\begin_layout Standard
La estrategia usada hasta el momento consiste en establecer unos pocos parámetro
s por los cuales puede alterarse el comportamiento del proceso de análisis
 de reclamos de salud para las demandas de cada cliente\SpecialChar \@.
 En particular, se
 ha integrado en el análisis farmacológico la verificación de condiciones
 de cobertura por cliente o por póliza para medicamentos y sus subgrupos
 farmacológicos asociados, así como para enfermedades y sus agrupaciones
 en tipos\SpecialChar \@.
 Luego de identificados los criterios por los cuales las empresas
 aseguradoras han solicitado parametrizar el comportamiento del producto,
 se diseñó un esquema poco flexible que permite expresar que cada tipo de
 criterio produce el rechazo de un reclamo de salud, así como reglas relacionada
s con casos de aprobación excepcional contra las reglas más generales de
 rechazo\SpecialChar \@.

\end_layout

\begin_layout Standard
La implantación de esta funcionalidad empleaba una tabla en la base de datos
 por cada criterio de rechazo y por cada tipo de asociación de la regla
 con un grupo: a nivel de toda una empresa aseguradora, o a nivel de un
 tipo específico de póliza\SpecialChar \@.
 Además, se empleaba una tabla adicional para
 cada tipo de excepción, las cuales podían definirse para cada tipo de criterio
 de rechazo; por ejemplo, si los criterios de rechazo hubieran sido por
 enfermedad, medicamento y principio activo, se podían definir excepciones
 al rechazo por enfermedad en base al medicamento o al principio activo\SpecialChar \@.

 Es claro que esta técnica no es escalable con respecto a la complejidad
 de las reglas de negocio que modela\SpecialChar \@.

\end_layout

\begin_layout Standard
En efecto, algunas solicitudes de opciones de parametrización hechas por
 los clientes han sido atendidas produciendo código en la aplicación específico
 para esos requerimientos particulares, lo cual requiere que esta configuración
 sea manipulada por los desarrolladores del sistema y no por sus operadores
 que no poseen conocimientos técnicos\SpecialChar \@.
 Esto afecta significativamente la
 capacidad de la empresa de implantar sus planes de expansión internacional
 bajo un modelo de franquicias donde el desarrollo del sistema está centralizado
 y las sucursales de cada región solo realizan labores de operación que
 no impliquen modificaciones a la implantación del producto\SpecialChar \@.

\end_layout

\begin_layout Section
Reglas de negocio proposicionales
\end_layout

\begin_layout Standard
Se determinó que una gran parte de la implantación de reglas de negocio
 puede reducirse a la evaluación de una proposición lógica que involucre
 información de las relaciones establecidas entre enfermedades y medicamentos
 solicitados y prescritos, junto con los demás datos asociados a una solicitud,
 de forma tal que si el juicio de la proposición resulta verdadero, habrá
 de registrarse la detección de alguna desviación\SpecialChar \@.
 La flexibilidad del cálculo
 proposicional permite expresar de esta manera a muchas de las reglas de
 negocio especificadas por los clientes para ser incorporadas en el proceso
 de validación de reclamos de salud, por lo cual una estrategia viable para
 incorporarlas al análisis es el almacenamiento de proposiciones como parte
 de la configuración del sistema para cada empresa aseguradora, y su interpretac
ión durante el procesamiento de una solicitud en el contexto de cada relación
 farmacológica que pueda establecerse\SpecialChar \@.

\end_layout

\begin_layout Standard
La representación de una proposición en una base de datos SQL puede resultar
 compleja si se pretende que las columnas de las tablas usadas no contengan
 datos más complejos que texto sin estructura, valores numéricos y referencias\SpecialChar \@.

 El modelado de datos con esa granularidad en un esquema relacional corresponde
 a la intención de manipular los datos o especificar restricciones sobre
 ellos a ese nivel de detalle\SpecialChar \@.
 Sin embargo, no está actualmente planteado
 que se hagan consultas o que se manipule a nivel de la base de datos la
 
\emph on
estructura interna
\emph default
 de una proposición que represente a una regla de negocios, por lo cual
 en esta situación resulta conveniente representar a una proposición completa
 en forma serializada como un dato atómico en una columna de una tabla de
 la base de datos\SpecialChar \@.

\end_layout

\begin_layout Section
Expresiones extensibles
\end_layout

\begin_layout Standard
Se implantó un modelo coalgebráico de proposiciones lógicas en Haskell siguiendo
 la técnica 
\emph on
tagless-final
\emph default
, junto con intérpretes para conversión a texto, evaluación, y serialización
 al formato JSON para almacenamiento en la base de datos\SpecialChar \@.
 Se eligieron operadores
 que convierten una lista de términos en su conjunción o disyunción, en
 vez de los más usuales operadores lógicos binarios, por razones de usabilidad
 y simplicidad de la implantación: la interfaz visual utilizada para manipular
 estas expresiones, descrita más adelante, permite la descripción de proposicion
es complejas de forma sencilla con un esquema que se adapta fácilmente a
 esta representación\SpecialChar \@.

\end_layout

\begin_layout Standard
La técnica 
\emph on
tagless-final
\emph default
 provee excelentes propiedades de extensibilidad por no requerir cambios
 al código existente para agregar funcionalidad adicional, por lo cual favorece
 la facilidad de extensión y refactorización del esquema de evaluación de
 reglas de negocio en caso de que las demandas cambiantes de los clientes
 de la empresa requieran extensiones al sistema\SpecialChar \@.
 Las técnicas usuales de
 representación de ASTs de expresiones con tipos de datos algebráicos no
 proveen extensibilidad, ya que al realizar extensiones al álgebra inicial,
 las funciones existentes se volverán parciales hasta tanto sean actualizadas,
 lo cual puede producir errores a tiempo de ejecución\SpecialChar \@.
 Esta situación es
 imposible al hacer uso de coálgebras finales para modelar las expresiones,
 por lo cual la aplicación de esta técnica provee fuertes garantías estáticas
 de correctitud\SpecialChar \@.

\end_layout

\begin_layout Standard
El modelo básico de proposición se extendió con una primitiva adicional
 que permite incluir términos en las proposiciones que hagan referencia
 a los valores asociados al contexto de evaluación de una regla de negocio,
 que se representa como un diccionario de propiedades textuales asociadas
 a listas de valores también textuales para esa propiedad; así, un contexto
 de evaluación para una regla de negocio podría indicar que una parte de
 una solicitud está asociada, por ejemplo, a varios subgrupos farmacológicos,
 y un término de una regla puede representar que un grupo farmacológico
 particular esté en el conjunto de grupos farmacológicos asociados al contexto
 de evaluación\SpecialChar \@.
 La primitiva adicional se implantó en una extensión separada
 del modelo de proposición debido a que en el futuro podría ser deseable
 emplear un tipo de condición más flexible o específico que la pertenencia
 de un valor textual a una lista de valores textuales de una propiedad\SpecialChar \@.

\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "listings/api/ConditionSYM.hs"
lstparams "basicstyle={\\scriptsize\\ttfamily},breaklines=true,frame=tblr"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Modelo coalgebráico de proposiciones lógicas\SpecialChar \@.

\begin_inset CommandInset label
LatexCommand label
name "fig:symantics"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
La serialización de términos del modelo a JSON utiliza literales booleanos
 para representar a las constantes 
\family typewriter
false
\family default
 y 
\family typewriter
true
\family default
, y diccionarios con una sola clave, 
\family typewriter
and
\family default
 u 
\family typewriter
or
\family default
 según el caso, cuyo valor asociado corresponde a un arreglo de JSON con
 la serialización de cada término en la conjunción o disyunción, respectivamente\SpecialChar \@.

 La serialización de la negación 
\family typewriter
neg
\family default
 es análoga, pero sin el arreglo, ya que opera sobre una sola proposición\SpecialChar \@.

 La serialización de las referencias al contexto utiliza un objeto JSON
 con la propiedad del contexto referida en la clave 
\family typewriter
key
\family default
, y el valor buscado en la clave 
\family typewriter
value
\family default
\SpecialChar \@.
 Por ejemplo:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "listings/api/RecordCondition.json"
lstparams "basicstyle={\\scriptsize\\ttfamily},breaklines=true,frame=tblr"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Ejemplo de la forma serializada en JSON de una regla de negocio proposicional\SpecialChar \@.

\begin_inset CommandInset label
LatexCommand label
name "fig:json-rule"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
La regla mostrada en su forma serializada en la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:json-rule"

\end_inset

 corresponde a la detección de una desviación si el contexto se asocia al
 asegurador identificado por el código 
\family typewriter
7c0c87f3
\family default
 y las asociaciones farmacológicas incluyen a la de código 
\family typewriter
0c4cef91
\family default
, con excepciones para los tipos de póliza cuyas versiones son identificadas
 por los códigos 
\family typewriter
7b131585
\family default
, 
\family typewriter
1230e6f1
\family default
 y 
\family typewriter
68a2d623
\family default
\SpecialChar \@.
 Al igual que en la descripción del API de datos, los códigos se representan
 cortos por razones de legibilidad, pero en el sistema real son UUIDs\SpecialChar \@.

\end_layout

\begin_layout Standard
Como por ahora la representación de estos datos en las condiciones se reduce
 a propiedades textuales, es responsabilidad de la aplicación construir
 contextos con los valores adecuados durante la interpretación de reglas
 en el proceso de detección de desviaciones; un desarrollo futuro podría
 incrementar las garantías estáticas de correctitud asociadas a este mecanismo
 si implementara términos específicos en las reglas de negocio para cada
 tipo de objeto referido\SpecialChar \@.
 Sin embargo, este modelo provee una gran expresividad
 y permite la parametrización detallada del comportamiento del sistema por
 sus operadores, y aumenta significativamente la mantenibilidad de la implantaci
ón de PCA Audit ya que elimina la necesidad de expresar en código de aplicación
 una gran cantidad de reglas que se convierten en datos del sistema, y se
 elimina el problema del crecimiento acelerado de la complejidad del modelo
 de datos para implantar la evaluación de las condiciones de cobertura de
 las pólizas de seguros de los clientes de la empresa\SpecialChar \@.

\end_layout

\begin_layout Section
Interfaz programática
\end_layout

\begin_layout Standard
El sistema de evaluación de reglas de negocio provee una interfaz programática
 para ser usada por PCA Audit durante el proceso de análisis de reclamos
 de salud\SpecialChar \@.
 Esta interfaz se implantó como un servicio 
\emph on
Web
\emph default
 sencillo que recibe los datos de un contexto de evaluación en forma serializada
 como un objeto JSON, realiza la evaluación de todas las reglas de negocio
 registradas en el sistema, y responde con la indicación de cuáles de ellas
 indican que ha de registrarse una desviación en el sistema, junto con la
 identificación del tipo de desviación\SpecialChar \@.

\end_layout

\begin_layout Standard
Aunque pudiera parecer preocupante la posibilidad de tener que evaluar una
 gran cantidad de reglas de negocio en un intérprete, todo múltiples veces
 por cada solicitud, se estima que el rendimiento será aceptable: como la
 evaluación de una proposición es un proceso que no puede producir efectos
 secundarios, resulta sencillo paralelizar la evaluación, y más aún por
 contar con las excelentes facilidades de evaluación paralela que provee
 la librería 
\family typewriter
parallel
\family default
 de Haskell\SpecialChar \@.
 En efecto, aunque la implantación actual del sistema de es secuencia
l ya que no se ha evaluado su desempeño, basta cambiar una palabra en el
 código fuente para paralelizar la evaluación, y la naturaleza pura del
 lenguaje y de la evaluación de reglas de negocio excluye la posibilidad
 de condiciones de carrera y demás males asociados a la evaluación concurrente
 en otras plataformas tecnológicas\SpecialChar \@.
 Esto produce, en principio, un excelente
 equilibrio entre simplicidad y rendimiento, aunque es importante medir
 la escalabilidad del sistema tanto por la cantidad de solicitudes como
 por la cantidad y complejidad de las reglas de negocio a evaluar\SpecialChar \@.

\end_layout

\begin_layout Section
Interfaz visual
\end_layout

\begin_layout Standard
Uno de los objetivos principales del sistema de evaluación de reglas de
 negocio es que el comportamiento del análisis de reclamos de salud de PCA
 Audit pueda ser adaptado a las condiciones de cobertura complejas de las
 pólizas de seguros de los clientes de la empresa, sin que esto implique
 modificaciones al código de la aplicación\SpecialChar \@.
 Es importante que los operadores
 del sistema que no forman parte del equipo de desarrollo puedan manipular
 con facilidad este comportamiento\SpecialChar \@.
 Con este fin, se desarrolló una interfaz
 visual para facilitar la manipulación directa de las proposiciones lógicas
 asociadas a reglas de negocio que no requiere trabajar directamente con
 código en ningún lenguaje de programación ni en ningún formato de serialización\SpecialChar \@.

\end_layout

\begin_layout Standard
Para este fin se utilizó Blockly, una herramienta de programación visual
 de software libre desarrollada por Google principalmente con el fin principal
 de servir como plataforma tecnológica para la enseñanza de la programación,
 aunque uno de los objetivos iniciales del proyecto incluía la personalización
 del comportamiento de aplicaciones 
\emph on
Web
\emph default
 de Google con pequeños programas compuestos por los propios usuarios de
 esas aplicaciones para adaptarlos a sus necesidades\SpecialChar \@.
 La interacción con
 Blockly consiste en la composición de programas a partir de bloques similares
 a piezas de rompecabezas, cada uno de los cuales representa una forma sintáctic
a particular del programa\SpecialChar \@.

\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/blockly.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Visualización en la interfaz de Blockly para la regla de negocio presentada
 en forma serializada en el ejemplo anterior\SpecialChar \@.

\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Blockly está diseñado para servir como plataforma para la construcción de
 interfaces de aplicaciones 
\emph on
Web
\emph default
, y se promueve su modificación para incorporar tipos de bloques relevantes
 para cada dominio donde la herramienta se aplique\SpecialChar \@.
 Se desarrolló una modificació
n simple de Blockly que incorpora bloques especiales para la construcción
 de proposiciones lógicas y referencias a contextos de evaluación de reglas
 de negocios\SpecialChar \@.
 Para mantener la interfaz simple, se desarrollaron únicamente
 dos tipos de bloques: un bloque para especificar referencias a propiedades
 del contexto de evaluación, donde se asocia un valor textual al nombre
 de una propiedad del contexto, y un bloque para combinaciones\SpecialChar \@.
 El bloque
 de combinaciones puede tener cualquier cantidad de entradas para términos
 en disyunción, y además puede configurarse para estar negado; los dos modos
 de operación del bloque se representan con las palabras «alguna» y «ninguna»,
 que representan cuáles proposiciones anidadas deben ser verdaderas para
 que sea verdadera la combinación\SpecialChar \@.
 Una negación simple puede representarse
 como una combinación negada de un solo elemento\SpecialChar \@.
 Para representar conjunciones,
 simplemente se conectan los bloques uno debajo de otro\SpecialChar \@.

\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/blockly-menu.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Selección de propiedad en referencias al contexto de evaluación de reglas
 de negocio.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/blockly-edit-set.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Configuración de bloques de combinación.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/blockly-nested.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Condiciones complejas con anidamiento, en este caso con excepciones por
 enfermedad.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
La plataforma de Blockly provee un formato de serialización XML para los
 programas compuestos con bloques, lo cual permite tanto cargar programas
 guardados en base a una especificación en este formato como guardar programas
 compuestos a través de la interfaz visual\SpecialChar \@.
 Se desarrolló una biyección entre
 el formato de serialización XML correspondiente a los programas compuestos
 de los bloques creados para representar reglas de negocio, y el formato
 de serialización JSON usado para serializar las reglas de negocio en la
 base de datos\SpecialChar \@.
 No se utilizó el mismo formato XML para el almacenamiento
 de las reglas de negocio debido a que el esquema usado refleja más directamente
 la forma en que los bloques fueron compuestos visualmente, y es poco convenient
e como estructura de datos para representar un AST a interpretar en el evaluador\SpecialChar \@.

\end_layout

\begin_layout Standard
Esta biyección permite que una regla de negocio se cargue de su forma serializad
a en la base de datos, que luego se represente y manipule visualmente, y
 finalmente se aplique la serialización a XML y la transformación al formato
 JSON para almacenar la versión modificada en la base de datos\SpecialChar \@.
 Aunque los
 tipos son birepresentables, algunos detalles de los dos formatos, como
 la falta de normalización por haber múltiples formas de representar algunos
 valores, impide que esta transformación sea propiamente un isomorfismo:
 la composición de las dos transformaciones podría alterar la representación
 exacta\SpecialChar \@.
 Por ejemplo, si se había almacenado en el formato JSON de la base
 de datos una conjunción de cero términos en una parte de una proposición,
 al pasar a bloques de Blockly y volver a JSON sin modificar la estructura,
 se obtendrá en su lugar un literal 
\family typewriter
true
\family default
\SpecialChar \@.
 Este cambio no altera la semántica de la proposición ni su representación
 visual, por lo cual no debería causar ningún efecto perceptible para los
 usuarios del sistema\SpecialChar \@.

\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\end_body
\end_document
