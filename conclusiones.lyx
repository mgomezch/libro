#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass book
\use_default_options true
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing onehalf
\use_hyperref false
\papersize letterpaper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter*

\series bold
Conclusiones y recomendaciones
\end_layout

\begin_layout Standard

\lang english
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{Conclusiones y recomendaciones}
\end_layout

\end_inset


\lang spanish

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
Un compañero de oficina me dijo hace unos minutos, viéndome almorzar al
 atardecer en mis pantalones formales, franela informal y 
\emph on
dreadlocks
\emph default
 despeinados, que todo lo que hago es raro: «eres rebeldía 101»\SpecialChar \@.
 El desarrollo
 de este proyecto de pasantía ciertamente fue raro\SpecialChar \@.
 No soy la única persona
 que conozco que desarrolla productos comerciales empleando programación
 funcional y una visión de la tecnología de la información con un enfoque
 en lenguajes formales; de hecho, varios compañeros de la universidad con
 quienes compartí cursos de esta área están emprendiendo vías similares
 en el desarrollo de sus carreras profesionales\SpecialChar \@.
 Sin embargo, no hay duda
 de que es un enfoque profundamente distinto al usual de nuestra industria\SpecialChar \@.

\end_layout

\begin_layout Plain Layout
No quisiera pensar que la rebeldía haya sido un factor en las decisiones
 que tomé al enfrentar problemas técnicos en este proyecto, y menos aún
 los fanatismos, aunque rápidamente he ganado fama —no sin merecerla— de
 fanático de Haskell\SpecialChar \@.
 Creo que todas las decisiones de tecnología que he
 tomado durante el desarrollo de esta pasantía han estado fundamentadas
 por las propiedades tecnológicas y metodológicas de la empresa: mucho que
 hacer (y mantener) para pocos desarrolladores con poco tiempo, cambios
 constantes (mi paradoja favorita), consecuencias graves para el negocio
 cuando la tecnología falla, y la sombra aterradora en el futuro del crecimiento
 exponencial\SpecialChar \@.
 En cualquier caso, el uso de Haskell ha resultado ser prácticamente
 un detalle interno de implementación que debería ser poco visible para
 los sistemas que dependan de lo que se desarrolló en esta pasantía, así
 que no me preocupo tanto por el punto específico de haber usado programación
 funcional\SpecialChar \@.
 Mucho más interesante y preocupante es la noción de emplear dos
 técnicas de abstracción verdaderamente raras: Squealer y REST\SpecialChar \@.

\end_layout

\begin_layout Plain Layout
Aunque REST está de moda y todo el mundo cree estar haciendo 
\emph on
RESTful
\emph default
 a sus APIs, casi nadie le presta atención al hecho de que ese estilo de
 arquitectura prescribe el uso de hipermedios como el fundamento de la interacci
ón con la aplicación, y los desarrollos de los pocos que sí le prestan atención
 a ese 
\emph on
detalle
\emph default
 todavía están en una fase que no puede describirse de otra manera que como
 experimental: se ensayan patrones y se proponen especificaciones de formatos
 para modelar recursos y sus estados, pero nadie tiene muy claro cómo va
 a funcionar todo esto hasta tal punto que podría incluso decirse que el
 único sistema público de gran escala en el mundo diseñado bajo los principios
 de arquitectura REST es la propia 
\emph on
World Wide Web
\emph default
 — y la 
\emph on
Web
\emph default
 es para consumo humano, no para máquinas\SpecialChar \@.
 La tendencia recientes de (ab)usar
 la 
\emph on
Web
\emph default
 como plataforma para construir aplicaciones pareciera estar alejando poco
 a poco el sueño del 
\emph on
Web 
\family typewriter
\emph default
2.0
\family default
, o 
\family typewriter
3.0
\family default
, o como se esté llamando hoy día a la idea de que habrá entre nosotros
 más máquinas que personas frente a un browser: HTML5 se aleja de la formalidad
 y acopla muy fuertemente presentación con datos, y el sueño dorado de integraci
ón universal bajo la 
\emph on
lingua franca
\emph default
 de XML bien hecho está desapareciendo ante el acoplamiento imponente de
 la 
\emph on
Web
\emph default
 a ese monstruo infeccioso de muchos nombres: JavaScript, ECMAScript, Satanás,
 o como lo quieran llamar, y su hijo bastardo, deforme y dinámico sin estructura
 ni extensibilidad real, JSON\SpecialChar \@.
 La lucha por definir un formato de datos genérico
 adecuado para servicios 
\emph on
Web
\emph default
 se ha centrado en JSON como formato estructural y de serialización, a pesar
 de que el problema podría resolverse de manera simple y extensible con
 algo similar a XForms\SpecialChar \@.
 El rechazo a la complejidad repugnante de SOAP ha
 hecho mucho daño a la 
\emph on
Web
\emph default
\SpecialChar \@.

\end_layout

\begin_layout Plain Layout
En este proyecto decidí no ir contra la corriente en ese sentido: es tan
 lamentable como inevitable que la 
\emph on
Web
\emph default
 sea la única opción razonable como plataforma de desarrollo para prácticamente
 cualquier aplicación interactiva que no pueda justificar un instalador
 por su tamaño o rendimiento requerido, y las herramientas modernas para
 adecentar el trabajo en el browser no saben ni quieren saber hablar XML,
 sino JSON\SpecialChar \@.
 La selección de Siren como formato para el API llegó algo tarde
 en el proceso: originalmente había planeado usar HAL, pero su soporte es
 pobre para APIs que hagan más que leer recursos sin parámetros\SpecialChar \@.
 Me preocupa
 un poco que aún estén en discusión aspectos relativamente básicos de su
 diseño, pero es un formato suficientemente simple como para que no sea
 un problema: como es simple manipularlo directamente desde JavaScript,
 por ahora no hace falta una biblioteca de cliente muy compleja\SpecialChar \@.

\end_layout

\begin_layout Plain Layout
Squealer, por su parte, es muchísimo más aterrador\SpecialChar \@.
 Su diseño es sencillo
 (en retrospectiva, claro) y su implementación solo es compleja porque generar
 SQL es una actividad fundamentalmente desagradable\SpecialChar \@.
 Eso es lo de menos\SpecialChar \@.
 Incluso
 no hay mayor razón para preocuparse en términos de la dificultad relativa
 de usarlo desde un lenguaje de aplicación, porque el API, que en realidad
 es un 
\emph on
RESTful resource–relational mapper
\emph default
, abstrae completamente ese problema — y para aquellos casos donde el rendimient
o de trabajar a través del API sea inadecuado incluso haciendo uso extenso
 de 
\emph on
caching
\emph default
 y otros intermediarios, siempre queda la opción de generar SQL a mano,
 y la abstracción interna de Squealer no es nada mala\SpecialChar \@.
 Eso no es lo preocupante\SpecialChar \@.

\end_layout

\begin_layout Plain Layout
El problema real de Squealer está en que no tenemos idea de cómo va a ser
 el comportamiento a largo plazo de una base de datos con ese patrón: no
 sabemos si tiene sentido eliminar datos «inalcanzables» desde activos (algo
 así como el 
\family typewriter
VACUUM
\family default
 de sistemas que emplean MVCC, que a su vez es algo así como recolección
 de basura), o si es simplemente cuestión de preservarlos pero en un servidor
 separado, o si no tiene sentido pensar en ellos como inalcanzables porque
 a fin de cuentas constituyen información en la base de datos que pudiera
 ser importante y punto\SpecialChar \@.
 Tampoco sabemos cómo se van a comportar los índices,
 ni si normalizar los microesquemas produce un 
\emph on
tradeoff
\emph default
 adecuado para el rendimiento de las consultas a las vistas, ni si será
 mejor emplear vistas materializadas, o quizá mejor sea ofrecer vistas materiali
zadas y también vistas basadas en reescritura de consultas, pero entonces
 las escrituras serán lentas, y\SpecialChar \ldots{}

\end_layout

\begin_layout Plain Layout
En fin, Squealer corresponde a un patrón de diseño de bases de datos que
 pareciera ser original, y por lo tanto, nadie lo ha estudiado\SpecialChar \@.
 Nosotros
 no tenemos tiempo de estudiarlo — necesitamos usarlo ahora mismo, pero
 solo si suponemos que tendrá propiedades de rendimiento compatibles con
 nuestro negocio\SpecialChar \@.
 Si no, es posible que podamos adaptar algún 
\emph on
tradeoff
\emph default
 tomado en la implantación actual y volverlo favorable\SpecialChar \@.
 Pero también es posible
 que el modelo simplemente sea un fracaso\SpecialChar \@.
 La base de datos podría crecer
 mucho más rápido que lo sostenible si hay demasiadas escrituras, en especial
 si las tablas que cambian con frecuencia son objeto directa o indirectamente
 de muchas relaciones covariantes\SpecialChar \@.
 Modelos SQL normales potencialmente sufren
 de problemas de rendimiento en escrituras con el mismo origen porque también
 pueden tener 
\family typewriter
ON UPDATE CASCADE
\family default
, pero en este caso es mucho más frecuente: si las referencias son a versiones,
 
\emph on
cualquier
\emph default
 cambio rompe la clave foránea, y al menos en SQL normal, se sobreescribe
 en vez de agregar a la historia\SpecialChar \@.
 Yo no sé de 
\emph on
big data
\emph default
, pero es posible que esto nos llene de más datos de lo que quisiéramos
 tener\SpecialChar \@.

\end_layout

\begin_layout Plain Layout
Creo que es un riesgo que vale la pena correr\SpecialChar \@.
 Creo que vale la pena porque
 el modelo se adapta perfectamente a la visión de la empresa: después de
 todo, el punto del patrón de diseño de Squealer es que la base de datos
 sea totalmente auditable, y nuestro principal producto se llama 
\emph on
Audit
\emph default
 por algo\SpecialChar \@.
 También sospecho que el riesgo vale la pena porque el patrón ha
 demostrado tener muchas de las propiedades de una buena idea: es completamente
 consistente con sí mismo, puede abstraerse hasta casi desaparecer, y es
 una encarnación en el dominio específico de las bases de datos de ideas
 muy buenas que son de aplicabilidad mucho más general y que han traído
 enormes beneficios a muchas otras ramas de la tecnología, como el concepto
 general de inmutabilidad\SpecialChar \@.
 Normalmente, cuando una idea encaja de manera
 tan elegante en su contexto conceptual, es una idea que no traerá problemas\SpecialChar \@.

\end_layout

\begin_layout Plain Layout
El resto del proyecto también ha sido interesante, y me divierto con la
 fantasía de que varias ramas pequeñas de mi pasantía podrían haber constituido
 por sí solos proyectos de suficiente escala e interés para una pasantía;
 en particular, y abandonando toda humildad, creo que Squealer podría motivar
 al menos una tesis de maestría —y no soy el único que lo cree!—, y debe
 haber algo de valor en la idea de un intérprete con interfaz 
\emph on
RESTful
\emph default
 para evaluar en paralelo ASTs de reglas de negocio, todo implantado como
 un coálgebra final\SpecialChar \@.
 Incluso la idea de hacer que el sistema sea configurable
 con una herramienta de programación visual como Blockly me parece más merecedor
a de atención que muchos proyectos de pasantía de la carrera que se limitan
 a llenar plantillas de RUP y hacer alguna basura en Struts\SpecialChar \@.
 En mi defensa,
 advertí que abandonaría toda humildad en este párrafo\SpecialChar \@.

\end_layout

\begin_layout Plain Layout
Hablando de humildad: recuerdo cuando recibí el plan de trabajo de mi pasantía
 con observaciones de la coordinación, entre las cuales decía que el proyecto
 parecía «ambicioso»\SpecialChar \@.
 Descarté el comentario como una exageración: cinco
 meses —casi dos trimestres!— a tiempo completo seguramente serían más que
 suficiente para hacer una tonta base de datos y adaptar unas tontas aplicacione
s, incluso para mí, que soy lento para las bases de datos\SpecialChar \@.
 Esto comenzó en
 abril del año pasado, y ya es febrero — llevo casi un año, y quizá he cumplido
 la mitad de los objetivos del plan de trabajo original\SpecialChar \@.
 Claramente, lo único
 tonto era yo mismo\SpecialChar \@.
 Aunque no es este tipo de reflexión la que se supone
 que escriba al final de mi libro, si me preguntan qué puedo concluir de
 mi pasantía, diría que me he dado cuenta de lo tonto que soy y de lo difícil,
 lo increíblemente difícil que es desarrollar 
\emph on
software
\emph default
 en el fulano 
\emph on
mundo real
\emph default
\SpecialChar \@.
 Todos los días tienes que aprender e inventar miles de pequeñas y grandes
 ideas, analizar cada una, y descartar casi todas cuando no pasan el filtro
 de ser adecuadas para el 
\emph on
big picture
\emph default
 de lo que estés haciendo\SpecialChar \@.
 Evaluar las consecuencias de tus decisiones tecnológic
as para no equivocarte requiere un entendimiento amplio y a la vez profundo
 de la tecnología informática como un todo, así como de tu dominio específico,
 y lograr ese entendimiento es imposible sin mucha experiencia, mucha comunicaci
ón, y sobre todo, muchos, muchísimos errores\SpecialChar \@.

\end_layout

\begin_layout Plain Layout
Jamás dejo de impresionarme por lo difícil que es programar\SpecialChar \@.

\end_layout

\end_inset


\end_layout

\begin_layout Standard
La práctica hasta ahora en el desarrollo de tecnología dentro de PRX Control
 Solutions ha estado enfocada principalmente en adaptar tecnología existente
 a los requerimientos de la empresa, incluso cuando la semántica implantada
 por estas tecnologías no se ajustara adecuadamente a los requerimientos
 prácticos del negocio\SpecialChar \@.
 Durante el desarrollo de este proyecto de pasantía
 se identificaron diversos problemas de esta naturaleza: el origen de estos
 problemas no radica tanto en que se cometieran errores de diseño e implantación
 en las soluciones tecnológicas de la empresa, sino que las tecnologías
 que han fundamentado a este diseño, por más que se usaran de la mejor manera
 posible, no son capaces de expresar directamente los mecanismos con los
 cuales se relacionan e interaccionan los objetos del dominio de los productos
 de la empresa\SpecialChar \@.
 En varios casos, la solución a esos problemas implicó un
 replanteamiento de los principios básicos de la operación tecnológica para
 lograr una adaptación efectiva a los requerimientos prácticos del negocio\SpecialChar \@.

 En particular, se logró desarrollar un mecanismo genérico para la persistencia
 e integridad de datos en contextos que requieran asociaciones de naturaleza
 similar a la provista en sistemas de control de versiones, lo cual se ajusta
 mucho mejor al tipo de problemas que la empresa pretende atacar con sus
 productos que las técnicas usuales de modelado de datos que no tienen soporte
 directo para el registro y la asociación de información histórica\SpecialChar \@.
 Este
 mecanismo genérico además soporta suficiente abstracción para permitir
 reducciones importantes en la discrepancia entre el modelo abstracto de
 los conceptos relevantes para el negocio, y la implantación concreta en
 la base de datos, hasta tal punto que las tablas de la base de datos implantada
 corresponden con precisión a los conceptos del dominio relevantes para
 los sistemas de la empresa\SpecialChar \@.

\end_layout

\begin_layout Standard
El desarrollo de esta abstracción requirió un cambio en la estrategia fundamenta
l de desarrollo: en vez de partir de tecnologías existentes e intentar modelar
 dentro de sus limitaciones los problemas que se desean atacar, se procedió,
 al contrario, a desarrollar tecnología diseñada con el propósito específico
 de atacar problemas de manera genérica que compartan los mismos principios
 generales requeridos por el problema específico a resolver, y luego, dotados
 de esa tecnología diseñada a la medida del problema, se desarrolló de manera
 simple y directa la solución al problema específico\SpecialChar \@.
 Esta inversión en el
 proceso desplaza la dificultad de construcción del 
\emph on
software
\emph default
 a etapas más tempranas en el proceso de desarrollo y simplifica las etapas
 posteriores, y se estima que este intercambio de complejidad reducirá el
 esfuerzo requerido para adaptar el 
\emph on
software
\emph default
 desarrollado a los requerimientos siempre cambiantes de los clientes de
 la empresa\SpecialChar \@.

\end_layout

\begin_layout Standard
En conclusión, se determinó que se pueden obtener beneficios importantes
 al enfocar el desarrollo de 
\emph on
software
\emph default
 en los principios generales de diseño requeridos por el dominio del problema,
 y que más allá de adaptar tecnologías existentes al problema que se desea
 resolver, es deseable la creación de tecnologías nuevas que integren profundame
nte a los principios generales requeridos por el dominio del problema dentro
 de su diseño\SpecialChar \@.
 Esta estrategia se aplicó exitosamente como fundamento a todo
 el desarrollo realizado en este proyecto de pasantía, y permitió alcanzar
 los objetivos del proyecto de manera favorable al crecimiento futuro de
 la empresa y al mantenimiento y desarrollo futuro de sus productos\SpecialChar \@.

\end_layout

\begin_layout Section*
Recomendaciones
\end_layout

\begin_layout Standard
Los objetivos de la empresa a mediano plazo incluyen el desarrollo de PRX
 Analyzer, un producto basado en el análisis estadístico de los datos provenient
es de PCA Audit y PCA Farma sobre la prescripción y dispensación de medicamentos
, ya que se estima que estos datos serán de muy alto valor para la planificación
 de la comercialización de productos por parte de los laboratorios farmacéuticos
 que producen esos medicamentos\SpecialChar \@.
 En este sentido, será importante contar
 con una base de datos centralizada que incluya a los datos provenientes
 de todas las instancias de los productos de la empresa\SpecialChar \@.

\end_layout

\begin_layout Standard
El modelo de operación de PCA Audit hasta ahora ha mantenido completamente
 aisladas las bases de datos de cada instancia de la aplicación que se destina
 a cada cliente, principalmente debido a preocupaciones de seguridad y confidenc
ialidad de los datos que la aplicación maneja, y los datos que son comunes
 a varias instancias, como la información farmacológica que se emplea en
 el análisis de reclamos de salud, se transmiten manualmente entre las bases
 de datos independientes de cada cliente\SpecialChar \@.
 La operación de PRX Analyzer deberá
 disponer de los datos provenientes de todos estos orígenes en tiempo real,
 por lo cual es importante implantar un mecanismo que replique automáticamente
 los datos obtenidos o generados en los servidores de los clientes hacia
 la ubicación centralizada donde se realizará el análisis propio de PRX
 Analyzer\SpecialChar \@.
 Este proceso debe prestar especial atención a mantener la confidencial
idad de los datos, ya que los datos propios de los reclamos de salud de
 una compañía aseguradora no deben ser visibles por las demás\SpecialChar \@.
 Además, deben
 determinarse políticas de privacidad claras que especifiquen el manejo
 de información personal sobre los afiliados a pólizas de seguros, de forma
 que el análisis posterior no comprometa la privacidad de los clientes\SpecialChar \@.

\end_layout

\begin_layout Standard
La adaptación de los productos de la empresa a este requerimiento necesariamente
 los llevará a convertirse propiamente en sistemas distribuidos, lo cual
 encaja convenientemente en la aplicación del estilo de arquitectura REST
 empleado en el desarrollo de este proyecto de pasantía\SpecialChar \@.
 Además, el posible
 crecimiento acelerado de la escala de la operación de PCA Farma podría
 requerir el pase a un modelo de computación distribuida a escala 
\emph on
Web
\emph default
, que es precisamente el tipo de problema para el cual está diseñado el
 estilo de arquitectura REST\SpecialChar \@.
 Se recomienda, por lo tanto, extender la aplicación
 de los principios de REST a todos los aspectos de la implantación de los
 productos de la empresa donde resulten aplicables\SpecialChar \@.

\end_layout

\begin_layout Standard
En particular, se recomienda diseñar e implantar un API REST que permita
 realizar de manera programática todas las acciones disponibles a través
 de la interfaz 
\emph on
Web
\emph default
 de las aplicaciones de la empresa\SpecialChar \@.
 Esto traería el beneficio adicional de
 facilitar el proceso de integración con clientes nuevos, ya que su interacción
 con los sistemas de la empresa podría hacerse a través del API genérico
 y dejaría de ser necesario implantar APIs específicos para cada cliente,
 que es la práctica actual, y requiere una gran cantidad de esfuerzo del
 equipo de desarrollo, lo cual retarda el proceso de integración\SpecialChar \@.

\end_layout

\begin_layout Standard
El equipo de desarrollo con frecuencia debe realizar consultas complejas
 a la base de datos para generar reportes solicitados por los clientes de
 la empresa donde se les suministra información estadística sobre su uso
 del sistema, los reclamos de salud de sus asegurados, y la cantidad y las
 causas del ahorro ocasionado por reclamos rechazados por el análisis farmacológ
ico que realizan sus productos\SpecialChar \@.
 Cada cliente tiene sus propios esquemas para
 evaluar la efectividad del sistema, por lo cual con frecuencia no resulta
 conveniente ni viable que se reutilicen para otros fines\SpecialChar \@.
 A pesar de esto,
 una parte significativa de las consultas que deben efectuarse consiste
 de juntar varias tablas a través de sus claves foráneas, lo cual puede
 tomar más tiempo de lo ideal debido a la sintaxis de SQL, que debido a
 su flexibilidad, requiere escribir mucho código para realizar este tipo
 de consulta\SpecialChar \@.
 Sin embargo, uno de los productos de la herramienta Squealer
 es un diagrama en formato SVG de la base de datos generada\SpecialChar \@.
 Este formato
 puede ser visualizado cómodamente dentro de un navegador 
\emph on
Web
\emph default
, y además puede ser usado como base para una aplicación interactiva simple
 en la cual se seleccionen tablas visualmente y se construya como salida
 el código SQL correspondiente a la juntar todas las tablas seleccionadas
 usando sus claves foráneas elegidas visualmente\SpecialChar \@.
 Se estima que realizar
 este tipo de aplicación no sería de gran dificultad, ya que existen excelentes
 herramientas para facilitar la creación de aplicaciones interactivas basadas
 en SVG dentro de un navegador 
\emph on
Web
\emph default
, y también se cree que una herramienta como esta podría aumentar significativam
ente la productividad del equipo de desarrollo\SpecialChar \@.
 Se recomienda, entonces,
 el desarrollo de esta idea como una herramienta para facilitar las tareas
 del equipo de desarrollo, para así sacar más provecho aún de los recursos
 que ahora se generan automáticamente gracias al uso de Squealer\SpecialChar \@.

\end_layout

\begin_layout Standard
El desarrollo de este proyecto de pasantía sacó provecho extensamente de
 la aplicación de técnicas relacionadas con la traducción e interpretación
 de lenguajes formales para resolver los problemas técnicos específicos
 que la empresa enfrenta\SpecialChar \@.
 En particular, este enfoque facilitó la construcción
 de una solución general al problema de bases de datos con referencias a
 versiones, ya que se resolvió como un traductor entre dos lenguajes de
 definición de datos: el formato de entrada de Squealer, y el dialecto de
 SQL de PostgreSQL\SpecialChar \@.
 De la misma manera, el enfoque linguístico motivó la
 construcción de una solución genérica y extensible para el problema de
 la parametrización del comportamiento del análisis farmacológico de reclamos
 de salud mediante intérpretes de proposiciones lógicas representadas como
 sus ASTs serializados\SpecialChar \@.

\end_layout

\begin_layout Standard
Toda la programación en este proyecto de pasantía se realizó en el lenguaje
 de programación Haskell, cuyo diseño hace muy conveniente el desarrollo
 de programas bajo este enfoque linguístico, y además provee excelentes
 garantías estáticas de correctitud que permitieron la implantación de varios
 traductores e interpretadores (el propio Squealer, el evaluador de reglas
 de negocio con sus múltiples intérpretes coalgebráicos, y las transformaciones
 entre los formatos de reglas usados en Blockly y en el evaluador) con facilidad
: debido a que su semántica nunca se especificó formalmente antes de iniciar
 su desarrollo, estos traductores e intérpretes debieron ser sujetos a refactori
zaciones relativamente profundas durante su implantación, pero el sistema
 de tipos expresivo de Haskell guió estas transformaciones y facilitó la
 detección rápida de muchos errores\SpecialChar \@.

\end_layout

\begin_layout Standard
El equipo de desarrollo de PRX Control Solutions ha manifestado con frecuencia
 que es muy problemático refactorizar la implantación de los productos de
 la empresa en respuesta a demandas de los clientes, y que las herramientas
 de desarrollo proveen muy poco apoyo para la detección de errores y para
 la programación de soluciones genéricas y adaptables a las necesidades
 específicas de sus clientes, lo cual es directamente contrario a lo que
 se observó en la experiencia del uso de Haskell en este proyecto de pasantía\SpecialChar \@.

 Por lo tanto, se recomienda el uso de herramientas como esta para reducir
 estos problemas de mantenibilidad en los futuros desarrollos de 
\emph on
software
\emph default
 de la empresa\SpecialChar \@.
 En efecto, uno de los planes a mediano plazo de la empresa
 incluye la reimplementación del análisis farmacológico de reclamos de salud
 para aprovechar las garantías estáticas de correctitud provistas por el
 sistema de tipos del lenguaje de programación Haskell\SpecialChar \@.

\end_layout

\begin_layout Standard
\paragraph_spacing onehalf
\begin_inset Newpage newpage
\end_inset


\end_layout

\end_body
\end_document
