#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass book
\use_default_options true
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement h
\paperfontsize 12
\spacing onehalf
\use_hyperref false
\papersize letterpaper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "basicstyle={\ttfamily\small}"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Servicio de datos
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Este capítulo describe la motivación, el diseño y la implantación de un
 servicio Web que provee abstracción del acceso a la base de datos nueva
 de los productos de PRX Control Solutions\SpecialChar \@.

\end_layout

\begin_layout Section
Motivación
\end_layout

\begin_layout Standard
PRX Control Solutions ofrece soluciones a sus clientes bajo el modelo SaaS\SpecialChar \@.

 La integración de los productos de la empresa con los sistemas de sus clientes
 se ha realizado, hasta ahora, en dos modalidades\SpecialChar \@.

\end_layout

\begin_layout Standard
Por una parte, algunos clientes desean potenciar sus procesos internos con
 aplicaciones para uso directo de sus empleados u otros usuarios finales
 como asegurados, clientes de farmacias, o empleados de farmacias afiliadas
 a un seguro médico como proveedores de medicamentos\SpecialChar \@.
 Para estos casos se
 han desarrollado aplicaciones 
\emph on
Web
\emph default
 que permiten la interacción de usuarios con el sistema a través de un navegador\SpecialChar \@.

 La implantación de estas aplicaciones 
\emph on
Web
\emph default
 utiliza generación de vistas estáticas en el servidor en combinación con
 algunos elementos de interacción dinámica mediante código JavaScript que
 interacciona con el servidor a través de llamadas AJAX\SpecialChar \@.
 Sin embargo, los
 productos de la empresa no han contado hasta ahora con un API 
\emph on
Web
\emph default
 que facilite efectuar operaciones genéricas sobre el sistema, por lo cual
 cada componente dinámica de la funcionalidad de las aplicaciones 
\emph on
Web
\emph default
 de la empresa ha requerido del desarrollo de código en el servidor específico
 para las necesidades de cada componente dinámico de la interfaz 
\emph on
Web
\emph default
\SpecialChar \@.
 Esto ha resultado problemático para el desarrollo y el mantenimiento de
 los productos, ya que hay muy poca reutilización de código y hay un alto
 acoplamiento entre la estructura de la interfaz 
\emph on
Web
\emph default
 —que está en constante cambio por demandas de los clientes— y la implantación
 de las operaciones necesarias en el servidor\SpecialChar \@.

\end_layout

\begin_layout Standard
Por otra parte, algunos clientes de la empresa ya cuentan con tecnología
 para la gestión de sus procesos y flujos de trabajo que desean mejorar
 mediante la integración del análisis farmacológico de reclamos de salud
 de los productos de PRX Control Solutions\SpecialChar \@.
 En estos casos, los clientes
 requieren que sus propios sistemas puedan interaccionar programáticamente
 con los productos de la empresa, lo cual requiere que éstos ofrezcan un
 API que pueda ser consumido por los sistemas de los clientes\SpecialChar \@.
 Sin embargo,
 los productos de la empresa no cuentan con un API genérico que permita
 extraer información y realizar operaciones generales con ellos, sino que
 se ha desarrollado un API específico para los requerimientos particulares
 de cada cliente que lo ha solicitado\SpecialChar \@.
 Esto es indeseable por varias razones:
 es necesario desarrollar mecanismos de interacción muy específicos para
 cada cliente que solicite la posibilidad de interacción programática con
 los productos de la empresa, lo cual dificulta la integración; además,
 la implantación del API específico para un cliente rara vez es fácilmente
 reutilizable para reducir la labor de desarrollo del API específico para
 otros clientes, y se produce un fuerte acoplamiento entre los dos sistemas
 que se comunican\SpecialChar \@.

\end_layout

\begin_layout Standard
Esta situación puede mejorarse significativamente con el desarrollo de un
 API genérico para interactuar con la funcionalidad básica provista por
 los sistemas de la empresa: más allá de dar soporte a operaciones específicas
 para una parte de una vista 
\emph on
Web
\emph default
 o una integración con un cliente con un proceso y un formato de datos particula
r, se requiere acceso programático a las operaciones primitivas asociadas
 a los datos y a los procesos implantados por estos sistemas, de manera
 que operaciones más complejas puedan realizarse componiendo estas operaciones
 primitivas\SpecialChar \@.

\end_layout

\begin_layout Standard
Una parte significativa de esta tarea corresponde a proveer un mecanismo
 para consultar y manipular los datos de la base de datos de manera simple,
 ya que muchos de los datos en el modelo no corresponden al resultado de
 procesos con lógica compleja, sino que son datos simples que deben poder
 insertarse, modificarse y eliminarse directamente\SpecialChar \@.
 Por otra parte, aunque
 la técnica usada para generar la implantación de la base de datos provee
 un buen grado de abstracción sobre el registro de la historia de los datos,
 la abstracción no es perfecta y la estructura de las tablas no corresponde
 exactamente con la del modelo especificado (debido a la representación
 especial de las referencias)\SpecialChar \@.

\end_layout

\begin_layout Standard
Por estas razones, conviene proveer una abstracción para el acceso a datos
 en forma de un servicio 
\emph on
Web
\emph default
\SpecialChar \@.

\end_layout

\begin_layout Section
Capa de datos REST
\end_layout

\begin_layout Standard
Existen varios estilos de arquitectura comunes para el diseño de un servicio
 
\emph on
Web
\emph default
\SpecialChar \@.
 En particular, el estilo de arquitectura REST provee propiedades que favorecen
 los principios generales de diseño requeridos por los productos de la empresa:
 REST restringe la arquitectura a un diseño por capas, con independencia
 entre clientes y servidores y ausencia de estado en la comunicación, lo
 cual tiene precisamente la intención de proveer un equilibrio entre simplicidad
 y rendimiento para favorecer la escalabilidad, y el uso de hipermedios
 y una interfaz uniforme favorece la extensibilidad y la facilidad de refactoriz
ación\SpecialChar \@.
 En este sentido, se decidió implantar un servicio Web siguiendo el
 estilo de arquitectura REST para abstraer el acceso a los objetos de la
 base de datos, tanto en sus versiones actuales como sus versiones históricas\SpecialChar \@.

\end_layout

\begin_layout Standard
El estilo de arquitectura REST no prescribe un protocolo específico, sino
 que define propiedades de una arquitectura para el mecanismo de interacción
 entre los entes de un sistema distribuido\SpecialChar \@.
 En el caso particular de servicios
 
\emph on
Web
\emph default
 que utilicen el estilo de arquitectura REST, se utiliza el protocolo HTTP
 para la comunicación, y debe seleccionarse el conjunto de recursos, su
 forma de identificación con URIs, y un conjunto de formatos para la presentació
n de las representaciones del estado de cada recurso, entre los cuales el
 cliente del servicio podrá elegir\SpecialChar \@.
 Además, debe seleccionarse qué métodos
 de HTTP serán soportados por cada recurso, así como restricciones adicionales
 relacionadas con la autorización requerida para hacer cada acción sobre
 cada recurso\SpecialChar \@.

\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
TODO: referencia a la tesis de Roy Fielding y quizá otros recursos sobre
 REST
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Representaciones
\end_layout

\begin_layout Standard
Una de las restricciones fundamentales para el diseño de un servicio REST
 es que las representaciones de estados de los recursos estén en un formato
 de hipertexto que especifique en sí mismo las transiciones de estado que
 pueden efectuarse sobre los recursos, así como las transiciones de navegación
 por enlaces entre los recursos\SpecialChar \@.
 Existen muchos formatos establecidos que
 permiten esto, y típicamente están basados en HTML, XML o JSON\SpecialChar \@.

\end_layout

\begin_layout Standard
La implantación inicial del API provee representaciones en el formato de
 hipertexto Siren, basado en JSON\SpecialChar \@.
 Este formato se eligió por su simplicidad,
 su capacidad de expresar enlaces y acciones similares a formularios, y
 por estar basado en JSON, lo cual facilita tremendamente el procesamiento
 de los datos obtenidos del API en código JavaScript dentro de un navegador
 
\emph on
Web
\emph default
, que es la tecnología que se usará para implantar una interfaz administrativa
 para la base de datos a partir del API\SpecialChar \@.

\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
TODO: referencia a Siren
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Recursos e identificación
\end_layout

\begin_layout Standard
El estado en ejecución de la base de datos se compone del estado de sus
 tablas, el estado de las filas de cada tabla, y sus versiones históricas\SpecialChar \@.

 Cada fila de las tablas de la base de datos es en realidad una versión
 particular que resulta estar actualmente activa, y una versión de una fila
 se compone de los valores correspondientes a cada columna junto con su
 fecha de registro y otros metadatos como su relación con las versiones
 que le preceden y suceden, si las hay\SpecialChar \@.

\end_layout

\begin_layout Standard
Además, se representa como recursos del API REST a los metadatos que describen
 la estructura de la base de datos, ya que las restricciones del estilo
 de arquitectura REST establecen que la descripción de los recursos presentados
 debe proveerse dentro del sistema para que éste se describa y documente
 a sí mismo\SpecialChar \@.

\end_layout

\begin_layout Standard
Cada URI que identifica a un recurso del API llevará como prefijo la ruta
 raíz del API de la capa de datos, que será 
\family typewriter
/v1/database
\family default
 para indicar que se desea interactuar con la versión 1 del API, lo cual
 permitirá proveer versiones futuras del API en el mismo dominio y preservar
 la interfaz de versiones anteriores durante etapas de migración, y a la
 vez se agrupa la parte del API correspondiente al acceso de bajo nivel
 a las tablas de la base de datos, lo cual reduce el potencial de conflictos
 de nombres con desarrollos posteriores del API que trabajen a un nivel
 de abstracción superior al de la capa de datos\SpecialChar \@.

\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
TODO: hablar de link relations y hacer referencia al registro de IANA de
 tipos de relación
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Colección de las tablas
\end_layout

\begin_layout Standard
El primer recurso que se identifica, que además será el punto de entrada
 del API, corresponde a la colección que incluye a cada una de las tablas\SpecialChar \@.

\end_layout

\begin_layout Standard
Se identifica a este recurso con la ruta raíz del API de la capa de datos\SpecialChar \@.

\end_layout

\begin_layout Standard
La colección de tablas estará enlazada con cada tabla que la compone con
 un enlace con el tipo de relación 
\family typewriter
item
\family default
\SpecialChar \@.

\end_layout

\begin_layout Standard
Por ejemplo, una petición 
\family typewriter
GET
\family default
 a la ruta del recurso que solicite el formato Siren producirá una respuesta
 como esta:
\begin_inset Foot
status open

\begin_layout Plain Layout
Las referencias en el servicio real serán presentadas como URIs absolutos
 incluyendo el protocolo, el 
\emph on
hostname
\emph default
 del API, y la ruta raíz del API\SpecialChar \@.
 Por ejemplo, en el caso del segundo enlace
 de este ejemplo, el servicio responderá en realidad con el URI 
\family typewriter
https://api.pcaaudit.com/v1/database/Asociación+farmacológica
\family default
\SpecialChar \@.
 Los ejemplos presentados en este informe omiten la primera parte de los
 URIs únicamente por razones de legibilidad\SpecialChar \@.

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "listings/api/root.json"
lstparams "basicstyle={\\scriptsize\\ttfamily},breaklines=true,frame=tb"

\end_inset


\end_layout

\begin_layout Standard
Por razones de legibilidad, se presentan solo dos enlaces hacia tablas\SpecialChar \@.
 En
 una respuesta real, habrá un enlace por cada tabla en la base de datos\SpecialChar \@.

\end_layout

\begin_layout Subsubsection
Tablas
\end_layout

\begin_layout Standard
La representación de cada tabla incluirá una descripción de qué clase de
 información se almacena en ella, con el propósito de proveer parte de la
 documentación del sistema dentro del mismo, donde puede encontrarse con
 facilidad\SpecialChar \@.

\end_layout

\begin_layout Standard
Se identifica al recurso asociado a una tabla con la ruta 
\family typewriter
/
\family default
\series bold
tabla
\series default
, donde 
\series bold
tabla
\series default
 es el nombre de la tabla debidamente codificado para poder representarse
 en un URL de HTTP\SpecialChar \@.

\end_layout

\begin_layout Standard
La representación de una tabla se comporta a la vez como la colección de
 sus columnas, por lo cual se enlaza con cada columna que la compone con
 el tipo de relación 
\family typewriter
item
\family default
\SpecialChar \@.
 Además, cada tabla enlazará a la colección de todas las tablas con el tipo
 de relación 
\family typewriter
collection
\family default
, y a la colección de sus filas activas con el tipo de relación 
\family typewriter
describes
\family default
, ya que la representación de la tabla especifica los metadatos asociados
 a los datos contenidos en la tabla, que son sus filas\SpecialChar \@.

\end_layout

\begin_layout Standard
Por ejemplo, una petición 
\family typewriter
GET
\family default
 a la ruta del recurso que solicite el formato Siren producirá una respuesta
 como esta:
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "listings/api/table.json"
lstparams "basicstyle={\\scriptsize\\ttfamily},breaklines=true,frame=tb"

\end_inset


\end_layout

\begin_layout Subsubsection
Columnas
\end_layout

\begin_layout Standard
Cada columna de cada tabla se representará de forma similar a las tablas:
 se provee una descripción de la columna y el tipo de dato que se almacena
 en ella como documentación 
\emph on
in-band
\emph default
\SpecialChar \@.
 Además, se debe proveer una especificación del tipo de la columna que sea
 adecuada para que un cliente que comprenda esta especificación pueda mostrar
 y manipular adecuadamente los valores en estas columnas\SpecialChar \@.

\end_layout

\begin_layout Standard
Se identifica al recurso asociado a una columna de una tabla con la ruta
 
\family typewriter
/
\family default
\series bold
tabla
\family typewriter
\series default
/column/
\family default
\series bold
columna
\series default
, donde 
\series bold
tabla
\series default
 es el nombre de la tabla y 
\series bold
columna
\series default
 es el de la columna, ambos debidamente codificados\SpecialChar \@.

\end_layout

\begin_layout Standard
Cada columna enlazará a la tabla a la cual pertenece con el tipo de relación
 
\family typewriter
collection
\family default
\SpecialChar \@.

\end_layout

\begin_layout Standard
Por ejemplo, una petición 
\family typewriter
GET
\family default
 a la ruta del recurso producirá una respuesta como esta:
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "listings/api/column.json"
lstparams "basicstyle={\\scriptsize\\ttfamily},breaklines=true,frame=tb"

\end_inset


\end_layout

\begin_layout Subsubsection
Colección de versiones activas
\end_layout

\begin_layout Standard
Cada tabla tiene asociada la colección de todas las versiones de sus filas
 que estén activas\SpecialChar \@.
 Como estas colecciones pueden ser de gran tamaño, sería
 inadecuado producir una representación con enlaces a todas las filas en
 la colección\SpecialChar \@.
 Para evitar este problema, se ordena a la colección por la
 fecha de registro de la versión desde la más reciente, y divide la secuencia
 en páginas: consultar el recurso principal redirigirá a un recurso con
 parámetros que indican que se pide una página con una cantidad pequeña
 de elementos de la colección\SpecialChar \@.

\end_layout

\begin_layout Standard
Se identifica al recurso asociado a la colección de versiones activas de
 filas de una tabla con la ruta 
\family typewriter
/
\family default
\series bold
tabla
\family typewriter
\series default
/rows
\family default
, donde 
\series bold
tabla
\series default
 es el nombre de la tabla\SpecialChar \@.

\end_layout

\begin_layout Standard
Los recursos correspondientes a vistas paginadas de la colección se identifican
 con la ruta de la colección principal con parámetros que especifican el
 alcance de la vista: 
\family typewriter
/
\family default
\series bold
tabla
\family typewriter
\series default
/rows?offset=
\family default
\series bold
inicio
\family typewriter
\series default
&limit=
\family default
\series bold
límite
\series default
, donde 
\series bold
tabla
\series default
 es el nombre de la tabla, 
\family typewriter
\series bold
inicio
\family default
\series default
 es el desplazamiento desde el inicio de la colección, y 
\series bold
límite
\series default
 es la cantidad máxima de elementos a mostrar en la página solicitada\SpecialChar \@.

\end_layout

\begin_layout Standard
Los recursos correspondientes a vistas filtradas de la colección se identifican
 con la ruta de la colección principal o paginada, con parámetros que especifica
n los criterios de selección de elementos\SpecialChar \@.
 Cada parámetro corresponderá a
 la igualdad de una columna a un valor en forma textual y adecuadamente
 codificada; en el caso de columnas que sean referencias, los valores serán
 representados como el URI que identifica al recurso asociado a la versión
 referida\SpecialChar \@.

\end_layout

\begin_layout Standard
Las propiedades de la colección son el número de filas totales presentes
 en ella, que se incluye independientemente de la cantidad de elementos
 por página, así como la cantidad de elementos y el desplazamiento inicial
 correspondiente a la página\SpecialChar \@.

\end_layout

\begin_layout Standard
Cada página incluye enlaces a la página siguiente con el tipo de relación
 
\family typewriter
next
\family default
, y a la página anterior con el tipo de relación 
\family typewriter
previous
\family default
\SpecialChar \@.
 Como la colección de versiones activas de una tabla es el objeto de un
 enlace con el tipo de relación 
\family typewriter
describes
\family default
 que proviene del recurso que representa a la tabla, se establece también
 el enlace inverso desde la colección de versiones activas hacia la representaci
ón de la tabla con el tipo de relación 
\family typewriter
describedby
\family default
\SpecialChar \@.

\end_layout

\begin_layout Standard
Los elementos de la colección se enlazarán con el tipo de relación 
\family typewriter
item
\family default
\SpecialChar \@.
 Finalmente, se proveerán varios tipos de descripciones de acciones especiales,
 similares a formularios:
\end_layout

\begin_layout Itemize
Para agregar una fila nueva a la colección, se provee una acción 
\family typewriter
insert
\family default
 que usará el método 
\family typewriter
POST
\family default
 de HTTP sobre la colección de versiones activas con los datos de la fila
 nueva a crear en los parámetros de la acción\SpecialChar \@.
 Esta acción causará un error
 si la inserción causaría la violación de una restricción de integridad
 de la base de datos\SpecialChar \@.

\end_layout

\begin_layout Itemize
Para filtrar los elementos de la colección, se provee una acción 
\family typewriter
search
\family default
 que usará el método 
\family typewriter
GET
\family default
 de HTTP sobre la colección de versiones activas y permite especificar valores
 para cada columna y obtener una colección restringida a las versiones activas
 de filas que tengan esos valores en las columnas correspondientes\SpecialChar \@.

\end_layout

\begin_layout Itemize
Para expandir las opciones de paginación de la colección, se provee una
 acción 
\family typewriter
paginate
\family default
 que usará el método 
\family typewriter
GET
\family default
 de HTTP sobre la colección de versiones activas y que recibe como parámetros
 el número de elementos a mostrar en cada página y el número de elementos
 de desplazamiento inicial\SpecialChar \@.

\end_layout

\begin_layout Standard
Por ejemplo, una petición 
\family typewriter
GET
\family default
 a la ruta del recurso que solicite el formato Siren producirá una respuesta
 como esta:
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "listings/api/collection.json"
lstparams "basicstyle={\\scriptsize\\ttfamily},breaklines=true,frame=tb"

\end_inset


\end_layout

\begin_layout Subsubsection
Versiones de filas
\end_layout

\begin_layout Standard
Cada versión histórica de una fila en una tabla de la base de datos se represent
a como un recurso\SpecialChar \@.
 Las propiedades del recurso serán los valores en cada
 columna de la fila asociados al nombre de la columna correspondiente\SpecialChar \@.
 Se
 proveerán además, como metadatos, la fecha de registro de la versión, y
 si ha sido revocada o sucedida, su fecha de revocación o sucesión\SpecialChar \@.

\end_layout

\begin_layout Standard
Se identifica al recurso asociado a una versión de una fila de una tabla
 con la ruta 
\family typewriter
/
\family default
\series bold
tabla
\family typewriter
\series default
/version/
\family default
\series bold
versión
\series default
, donde 
\series bold
tabla
\series default
 es el nombre de la tabla y 
\series bold
versión
\series default
 es la identificación de la fila de la versión en la bitácora de versiones
 correspondiente\SpecialChar \@.

\end_layout

\begin_layout Standard
Las versiones de filas se enlazan con la colección de filas activas de la
 tabla correspondiente con el tipo de relación 
\family typewriter
item
\family default
 incluso cuando no sean versiones activas; esto facilita la navegación del
 API por aumentar su regularidad\SpecialChar \@.
 Todas las versiones de filas enlazan a
 sus versiones predecesoras y sucesoras con el tipo de relación 
\family typewriter
predecessor-version
\family default
 o 
\family typewriter
successor-version
\family default
, respectivamente, usando las rutas 
\family typewriter
/
\family default
\series bold
tabla
\family typewriter
\series default
/version/
\family default
\series bold
versión
\family typewriter
\series default
/predecessor
\family default
 y 
\family typewriter
/
\family default
\series bold
tabla
\family typewriter
\series default
/version/
\family default
\series bold
versión
\family typewriter
\series default
/successor
\family default
, que indicarán redirección a la ubicación canónica de la versión adecuada
 si existiera, y de lo contrario indicarán un error\SpecialChar \@.
 Cada referencia que
 una versión haga a otra se representará como un enlace cuyo tipo de relación
 será el URI del recurso que representa a la columna correspondiente a la
 referencia, y cuyo valor será el URI de la versión referida\SpecialChar \@.

\end_layout

\begin_layout Standard
En caso de que la versión en cuestión sea activa, se proveerán varios tipos
 de descripciones de acciones especiales:
\end_layout

\begin_layout Itemize
La acción 
\family typewriter
delete
\family default
 usará el método 
\family typewriter
DELETE
\family default
 de HTTP sobre la versión, y resultará en su revocación, o en un error si
 revocarla causaría la violación de una restricción de integridad de la
 base de datos\SpecialChar \@.
 Esta acción no recibe parámetros\SpecialChar \@.

\end_layout

\begin_layout Itemize
La acción 
\family typewriter
update
\family default
 usará el método 
\family typewriter
PUT
\family default
 de HTTP sobre la versión, y resultará en la revocación y sucesión de la
 versión por una nueva cuyos datos serán incluidos como parámetros en el
 cuerpo de la solicitud, o producirá un error si la sucesión causaría la
 violación de una restricción de integridad de la base de datos\SpecialChar \@.

\end_layout

\begin_layout Standard
Por ejemplo, una petición 
\family typewriter
GET
\family default
 a la ruta del recurso que solicite el formato Siren producirá una respuesta
 como esta:
\begin_inset Foot
status open

\begin_layout Plain Layout
Este ejemplo incluye metadatos de fecha de revocación y un enlace a una
 versión sucesora, y también los controles asociados a modificación o eliminació
n de la fila\SpecialChar \@.
 Sin embargo, una versión revocada no mostrará controles para
 actualización, y una versión activa, que sí mostrará los controles, no
 mostrará fecha de revocación ni un enlace a una versión sucesora\SpecialChar \@.
 Se muestra
 un ejemplo con ambos datos para hacer al ejemplo más ilustrativo, pero
 esta respuesta no podrá ocurrir en el API real\SpecialChar \@.

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "listings/api/version.json"
lstparams "basicstyle={\\scriptsize\\ttfamily},breaklines=true,frame=tb"

\end_inset


\end_layout

\begin_layout Subsection
Interfaz administrativa
\end_layout

\begin_layout Standard
La estructura uniforme del API y permite que sea implantado de manera genérica
 únicamente con la provisión de la información estructural y descriptiva
 de la base de datos\SpecialChar \@.
 Por lo tanto, la implantación del API puede ser generada
 sin mayor dificultad a partir de la misma especificación del modelo de
 datos usada para generar su implantación en SQL\SpecialChar \@.

\end_layout

\begin_layout Standard
Además, la representación de los estados de recursos del API con un formato
 de hipertexto como Siren incluye toda la información necesaria para generar
 una interfaz que permita manipular los recursos, ya que sus representaciones
 especifican enlaces de navegación con los cuales puede explorarse el grafo
 de recursos modelados en el API, así como acciones que pueden efectuarse
 para manipular sus estados\SpecialChar \@.
 Los enlaces entre recursos pueden representarse
 en una vista 
\emph on
Web
\emph default
 como enlaces simples, y las acciones como formularios\SpecialChar \@.
 Por lo tanto, una
 interfaz 
\emph on
Web
\emph default
 para la administración de los datos representados como recursos en el API
 también puede implantarse de manera genérica e independiente de la estructura
 de los datos\SpecialChar \@.

\end_layout

\begin_layout Standard
Estas propiedades favorecen la extensibilidad y la facilidad de refactorización,
 ya que tanto el API y como la interfaz administrativa que lo utiliza directamen
te no tendrían una implantación ligada al modelo de datos específico, y
 quedarían automáticamente adaptadas a cualquier modificación o extensión
 futura del modelo de datos\SpecialChar \@.
 Además, se excluye enteramente la posibilidad
 de inconsistencias entre el modelo de datos y la implantación del API y
 su interfaz administrativa, ya que no existirá código ligado a una versión
 específica del modelo de datos\SpecialChar \@.

\end_layout

\begin_layout Standard
En efecto, una versión inicial de la interfaz administrativa se implantó
 sencillamente tomando una aplicación 
\emph on
Web
\emph default
 existente de software libre que implanta un cliente genérico para APIs
 que ofrezcan el formato Siren para representar los estados, enlaces y acciones
 de sus recursos\SpecialChar \@.
 Aunque esta interfaz genérica no está adaptada a los requerimie
ntos de diseño gráfico de los productos de la empresa, provee la facilidad
 de interactuar con los objetos de la base de datos a través del API REST
 sin necesidad alguna de desarrollar o configurar una interfaz específica
 para el modelo de datos desarrollado, por lo cual es un prototipo efectivo\SpecialChar \@.

 Desarrollos futuros podrán adaptar esta interfaz administrativa genérica
 a la identidad visual de la empresa, así como implantar modificaciones
 a la presentación de los datos que favorezcan la usabilidad de la interfaz
 administrativa de acuerdo a las necesidades específicas de sus usuarios\SpecialChar \@.

\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/siren-browser.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Vista de entidad en el prototipo de interfaz administrativa 
\emph on
Web
\emph default
 para la base de datos usando la aplicación 
\emph on
Siren Browser
\emph default
\SpecialChar \@.

\begin_inset CommandInset label
LatexCommand label
name "fig:siren-browser"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
La figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:siren-browser"

\end_inset

 muestra la vista Web en la aplicación Siren Browser
\begin_inset Note Comment
status open

\begin_layout Plain Layout
TODO: referencia del Siren Browser
\end_layout

\end_inset

 usada como prototipo para la interfaz administrativa\SpecialChar \@.
 Se muestran las propiedade
s de la entidad de Siren obtenida como representación de un recurso del
 API, así como sus enlaces de navegación, sus entidades anidadas (que en
 el caso mostrado en la figura son enlaces), y las acciones disponibles\SpecialChar \@.

 El recurso mostrado corresponde a una página de la colección de las versiones
 activas de las filas de una tabla\SpecialChar \@.

\end_layout

\begin_layout Standard
La figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:siren-browser-form"

\end_inset

 muestra el formulario generado para la acción 
\emph on
Paginate
\emph default
 disponible en la entidad mostrada en la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:siren-browser"

\end_inset

\SpecialChar \@.
 La aplicación 
\emph on
Siren Browser
\emph default
 genera controles para edición de valores de los tipos soportados por elementos
 
\family typewriter
input
\family default
 de HTML\SpecialChar \@.
 Desarrollos posteriores a este proyecto incluirán la adaptación
 de esta aplicación para permitir la manipulación directa de referencias
 con una interfaz que brinde mayor facilidad y usabilidad; actualmente,
 una referencia se manipula como la forma textual del URI que identifica
 al recurso asociado al objeto referido\SpecialChar \@.

\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/siren-browser-form.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Vista del formulario generado para una acción de una entidad en el prototipo
 de interfaz administrativa 
\emph on
Web
\emph default
 para la base de datos usando la aplicación 
\emph on
Siren Browser
\emph default
\SpecialChar \@.

\begin_inset CommandInset label
LatexCommand label
name "fig:siren-browser-form"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\end_body
\end_document
